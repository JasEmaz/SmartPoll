'use client';\n\nimport { useState, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useDropzone } from 'react-dropzone';\nimport { Button } from '../../../components/ui/button';\nimport { Input } from '../../../components/ui/input';\nimport { Textarea } from '../../../components/ui/textarea';\nimport {\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n} from '../../../components/ui/form';\nimport { useAuth } from '@/app/contexts/auth';\nimport { createClient } from '@/lib/supabase/client';\nimport { SharePoll } from '../../../components/polls';\nimport {\n  ValidationSchemas,\n  InputSanitizer,\n  FileValidator,\n  ErrorSanitizer,\n  RateLimiter,\n  SECURITY_CONFIG\n} from '@/lib/security';\nimport type { z } from 'zod';\n\n// Type for our form data\ntype CreatePollFormData = z.infer<typeof ValidationSchemas.createPoll>;\n\n/**\n * SECURITY FEATURES IMPLEMENTED:\n * \n * 1. INPUT SANITIZATION:\n *    - DOMPurify removes ALL HTML tags and dangerous characters\n *    - Additional regex patterns remove script injection attempts\n *    - Text normalization prevents whitespace attacks\n * \n * 2. VALIDATION:\n *    - Zod schema validation with strict typing\n *    - Length limits prevent buffer overflow attacks\n *    - Duplicate detection prevents data pollution\n *    - Date validation prevents time-based attacks\n * \n * 3. FILE UPLOAD SECURITY:\n *    - MIME type validation (only images allowed)\n *    - File size limits (2MB max)\n *    - Extension validation (.jpg, .png, etc.)\n *    - Filename sanitization prevents directory traversal\n * \n * 4. ERROR HANDLING:\n *    - Error sanitization removes sensitive information\n *    - No detailed error logging to client\n *    - Safe error messages for users\n * \n * 5. RATE LIMITING:\n *    - Prevents spam and abuse\n *    - User-based request limiting\n * \n * 6. ACCESS CONTROL:\n *    - Authentication required\n *    - User session validation\n */\n\nexport default function SecureCreatePollPage() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const supabase = createClient();\n  const [success, setSuccess] = useState(false);\n  const [createdPoll, setCreatedPoll] = useState<{ id: string; question: string } | null>(null);\n  const [uploadedImage, setUploadedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n\n  // Initialize form with react-hook-form and Zod validation\n  const form = useForm<CreatePollFormData>({\n    resolver: zodResolver(ValidationSchemas.createPoll),\n    defaultValues: {\n      question: '',\n      options: [\n        { text: '', id: '1' },\n        { text: '', id: '2' }\n      ],\n      expiresAt: '',\n    },\n    mode: 'onChange' // Real-time validation\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: 'options'\n  });\n\n  // Secure file upload handler\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 0) return;\n\n    const file = acceptedFiles[0];\n    \n    // Validate file security\n    const validation = FileValidator.validateFile(file);\n    if (!validation.isValid) {\n      form.setError('image', { \n        type: 'manual', \n        message: validation.error! \n      });\n      return;\n    }\n\n    // Additional security: Check file content (magic bytes)\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const buffer = e.target?.result as ArrayBuffer;\n      if (buffer) {\n        const bytes = new Uint8Array(buffer.slice(0, 4));\n        const hex = Array.from(bytes).map(b => b.toString(16).padStart(2, '0')).join('');\n        \n        // Check magic bytes for common image formats\n        const validMagicBytes = [\n          'ffd8ff', // JPEG\n          '89504e', // PNG  \n          '47494638', // GIF\n          '52494646' // WebP (RIFF)\n        ];\n        \n        const isValidImage = validMagicBytes.some(magic => hex.startsWith(magic));\n        if (!isValidImage) {\n          form.setError('image', { \n            type: 'manual', \n            message: 'File is not a valid image' \n          });\n          return;\n        }\n        \n        setUploadedImage(file);\n        setImagePreview(URL.createObjectURL(file));\n        form.clearErrors('image');\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  }, [form]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/jpeg': ['.jpg', '.jpeg'],\n      'image/png': ['.png'],\n      'image/gif': ['.gif'],\n      'image/webp': ['.webp']\n    },\n    maxSize: SECURITY_CONFIG.FILE_UPLOAD.MAX_SIZE,\n    multiple: false\n  });\n\n  const addOption = () => {\n    if (fields.length < SECURITY_CONFIG.TEXT_LIMITS.MAX_OPTIONS) {\n      append({ text: '', id: (fields.length + 1).toString() });\n    }\n  };\n\n  const removeOption = (index: number) => {\n    if (fields.length > SECURITY_CONFIG.TEXT_LIMITS.MIN_OPTIONS) {\n      remove(index);\n    }\n  };\n\n  const onSubmit = async (data: CreatePollFormData) => {\n    // Authentication check\n    if (!user) {\n      form.setError('root', { \n        type: 'manual', \n        message: 'Authentication required' \n      });\n      return;\n    }\n\n    // Rate limiting check\n    const isRateLimited = RateLimiter.isRateLimited(\n      user.id, \n      SECURITY_CONFIG.RATE_LIMITS.POLL_CREATION, \n      60 * 60 * 1000 // 1 hour window\n    );\n    \n    if (isRateLimited) {\n      form.setError('root', { \n        type: 'manual', \n        message: 'Too many polls created. Please wait before creating another.' \n      });\n      return;\n    }\n\n    try {\n      // Data is already sanitized by Zod transforms\n      const sanitizedData = {\n        question: data.question, // Already sanitized\n        options: data.options.filter(opt => opt.text.trim()), // Remove empty options\n        expiresAt: data.expiresAt || null\n      };\n\n      // Validate final data structure\n      if (sanitizedData.options.length < SECURITY_CONFIG.TEXT_LIMITS.MIN_OPTIONS) {\n        throw new Error(`At least ${SECURITY_CONFIG.TEXT_LIMITS.MIN_OPTIONS} options required`);\n      }\n\n      // Create poll in database\n      const { data: poll, error: pollError } = await supabase\n        .from('polls')\n        .insert({\n          question: sanitizedData.question,\n          user_id: user.id,\n          expires_at: sanitizedData.expiresAt,\n        })\n        .select()\n        .single();\n\n      if (pollError) {\n        throw pollError;\n      }\n\n      // Create poll options\n      const optionsToInsert = sanitizedData.options.map(option => ({\n        poll_id: poll.id,\n        option_text: option.text,\n        votes: 0\n      }));\n\n      const { error: optionsError } = await supabase\n        .from('poll_options')\n        .insert(optionsToInsert);\n\n      if (optionsError) {\n        throw optionsError;\n      }\n\n      // Handle image upload if present\n      if (uploadedImage && user) {\n        const secureFilename = FileValidator.generateSecureFilename(\n          uploadedImage.name, \n          user.id\n        );\n        \n        const { error: uploadError } = await supabase.storage\n          .from('poll-images')\n          .upload(secureFilename, uploadedImage, {\n            cacheControl: '3600',\n            upsert: false\n          });\n\n        if (uploadError) {\n          console.warn('Image upload failed:', ErrorSanitizer.sanitizeError(uploadError));\n          // Don't fail the poll creation if image upload fails\n        }\n      }\n\n      setCreatedPoll({ \n        id: poll.id, \n        question: sanitizedData.question \n      });\n      setSuccess(true);\n\n    } catch (error) {\n      // Sanitize error for client display\n      const safeError = ErrorSanitizer.sanitizeError(error);\n      \n      // Log full error server-side (in production, use proper logging)\n      if (typeof window === 'undefined') {\n        console.error('Poll creation error:', ErrorSanitizer.createLogSafeError(error, 'createPoll'));\n      }\n      \n      form.setError('root', { \n        type: 'manual', \n        message: safeError\n      });\n    }\n  };\n\n  // Success screen\n  if (success && createdPoll) {\n    return (\n      <div className=\"max-w-4xl mx-auto py-8 space-y-8\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"h-16 w-16 mx-auto bg-green-100 rounded-full flex items-center justify-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"text-green-600\">\n              <path d=\"M20 6 9 17l-5-5\"/>\n            </svg>\n          </div>\n          <h1 className=\"text-3xl font-bold text-green-600\">Poll Created Successfully!</h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Your poll &quot;{InputSanitizer.sanitizeText(createdPoll.question)}&quot; is now live and ready to receive votes.\n            Share it with your audience using the options below.\n          </p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button \n            onClick={() => router.push(`/polls/${createdPoll.id}`)}\n            size=\"lg\"\n          >\n            View Poll\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={() => router.push('/dashboard')}\n            size=\"lg\"\n          >\n            Go to Dashboard\n          </Button>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          <SharePoll pollId={createdPoll.id} pollQuestion={createdPoll.question} />\n        </div>\n        \n        <div className=\"text-center text-sm text-muted-foreground\">\n          <p>Your poll URL: <code className=\"bg-muted px-2 py-1 rounded\">\n            {typeof window !== 'undefined' ? \n              InputSanitizer.sanitizeUrl(`${window.location.origin}/polls/${createdPoll.id}`) : \n              ''\n            }\n          </code></p>\n        </div>\n      </div>\n    );\n  }\n\n  // Main form\n  return (\n    <div className=\"max-w-2xl mx-auto py-8 space-y-8\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-3xl font-bold\">Create a New Poll</h1>\n        <p className=\"text-muted-foreground\">\n          Create a secure poll with validation and content filtering.\n        </p>\n      </div>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Root error display */}\n          {form.formState.errors.root && (\n            <div className=\"bg-destructive/15 text-destructive text-sm p-3 rounded-md\">\n              {form.formState.errors.root.message}\n            </div>\n          )}\n\n          {/* Question Field */}\n          <FormItem>\n            <FormLabel htmlFor=\"question\">Poll Question *</FormLabel>\n            <FormControl>\n              <Textarea\n                id=\"question\"\n                placeholder=\"What would you like to ask? (HTML tags will be removed)\"\n                {...form.register('question')}\n                className=\"min-h-20\"\n              />\n            </FormControl>\n            <FormDescription>\n              Be clear and specific. Maximum {SECURITY_CONFIG.TEXT_LIMITS.POLL_QUESTION_MAX} characters.\n              {form.watch('question') && (\n                <span className={`ml-2 ${\n                  form.watch('question').length > SECURITY_CONFIG.TEXT_LIMITS.POLL_QUESTION_MAX ? 'text-red-500' : 'text-muted-foreground'\n                }`}>\n                  ({form.watch('question').length}/{SECURITY_CONFIG.TEXT_LIMITS.POLL_QUESTION_MAX})\n                </span>\n              )}\n            </FormDescription>\n            <FormMessage />\n          </FormItem>\n\n          {/* Expiration Date */}\n          <FormItem>\n            <FormLabel htmlFor=\"expiresAt\">Expiration Date (Optional)</FormLabel>\n            <FormControl>\n              <Input\n                id=\"expiresAt\"\n                type=\"datetime-local\"\n                {...form.register('expiresAt')}\n              />\n            </FormControl>\n            <FormDescription>\n              The poll will automatically close at this time.\n            </FormDescription>\n            <FormMessage />\n          </FormItem>\n\n          {/* Image Upload */}\n          <FormItem>\n            <FormLabel>Poll Image (Optional)</FormLabel>\n            <div \n              {...getRootProps()} \n              className={`border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors ${\n                isDragActive ? 'border-primary bg-primary/10' : 'border-gray-300 hover:border-primary/50'\n              }`}\n            >\n              <input {...getInputProps()} />\n              {imagePreview ? (\n                <div className=\"space-y-2\">\n                  <img \n                    src={imagePreview} \n                    alt=\"Preview\" \n                    className=\"max-h-32 mx-auto rounded\"\n                    onError={() => {\n                      setImagePreview(null);\n                      setUploadedImage(null);\n                    }}\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    {uploadedImage?.name} ({Math.round((uploadedImage?.size || 0) / 1024)}KB)\n                  </p>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setImagePreview(null);\n                      setUploadedImage(null);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <div className=\"mx-auto w-12 h-12 text-gray-400\">\n                    <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {isDragActive ? 'Drop image here...' : 'Click or drag image to upload'}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    JPG, PNG, GIF, WebP • Max {SECURITY_CONFIG.FILE_UPLOAD.MAX_SIZE / (1024 * 1024)}MB\n                  </p>\n                </div>\n              )}\n            </div>\n            <FormMessage />\n          </FormItem>\n\n          {/* Options */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Poll Options *</h2>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={addOption}\n                size=\"sm\"\n                disabled={fields.length >= SECURITY_CONFIG.TEXT_LIMITS.MAX_OPTIONS}\n              >\n                Add Option ({fields.length}/{SECURITY_CONFIG.TEXT_LIMITS.MAX_OPTIONS})\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"flex items-start gap-2\">\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder={`Option ${index + 1} (HTML will be stripped)`}\n                      {...form.register(`options.${index}.text`)}\n                    />\n                    {form.formState.errors.options?.[index]?.text && (\n                      <p className=\"text-sm text-red-500 mt-1\">\n                        {form.formState.errors.options[index]?.text?.message}\n                      </p>\n                    )}\n                    {form.watch(`options.${index}.text`) && (\n                      <p className={`text-xs mt-1 ${\n                        form.watch(`options.${index}.text`).length > SECURITY_CONFIG.TEXT_LIMITS.POLL_OPTION_MAX \n                          ? 'text-red-500' : 'text-muted-foreground'\n                      }`}>\n                        {form.watch(`options.${index}.text`).length}/{SECURITY_CONFIG.TEXT_LIMITS.POLL_OPTION_MAX}\n                      </p>\n                    )}\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeOption(index)}\n                    className=\"h-9 w-9 shrink-0\"\n                    disabled={fields.length <= SECURITY_CONFIG.TEXT_LIMITS.MIN_OPTIONS}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M3 6h18\"></path>\n                      <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"></path>\n                      <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"></path>\n                    </svg>\n                  </Button>\n                </div>\n              ))}\n            </div>\n            \n            {form.formState.errors.options?.root && (\n              <p className=\"text-sm text-red-500\">\n                {form.formState.errors.options.root.message}\n              </p>\n            )}\n          </div>\n\n          {/* Submit Buttons */}\n          <div className=\"flex justify-end gap-4 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => router.back()}\n              disabled={form.formState.isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={form.formState.isSubmitting || !form.formState.isValid}\n            >\n              {form.formState.isSubmitting ? (\n                <>\n                  <div className=\"mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\" />\n                  Creating...\n                </>\n              ) : (\n                'Create Secure Poll'\n              )}\n            </Button>\n          </div>\n        </form>\n      </Form>\n\n      {/* Security Notice */}\n      <div className=\"mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n        <h3 className=\"text-sm font-semibold text-blue-900 mb-2\">🔒 Security Features Active</h3>\n        <ul className=\"text-xs text-blue-800 space-y-1\">\n          <li>• Input sanitization removes HTML tags and malicious scripts</li>\n          <li>• File uploads restricted to images only with size limits</li>\n          <li>• Real-time validation prevents invalid data submission</li>\n          <li>• Rate limiting prevents spam and abuse</li>\n        </ul>\n      </div>\n    </div>\n  );\n}"
