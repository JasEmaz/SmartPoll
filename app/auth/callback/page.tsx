import { createServerClient } from '@/lib/supabase';\nimport { NextRequest } from 'next/server';\nimport { redirect } from 'next/navigation';\n\n/**\n * SECURITY FEATURES:\n * \n * 1. SERVER-SIDE CODE EXCHANGE: Secure OAuth code exchange\n * 2. SESSION VALIDATION: Validates received tokens\n * 3. SECURE REDIRECT: Safe redirect to intended destination\n * 4. ERROR HANDLING: Proper error handling for failed OAuth flows\n */\n\ninterface SearchParams {\n  code?: string;\n  error?: string;\n  error_description?: string;\n  state?: string;\n}\n\ninterface AuthCallbackProps {\n  searchParams: SearchParams;\n}\n\nexport default async function AuthCallback({ searchParams }: AuthCallbackProps) {\n  const { code, error, error_description } = searchParams;\n  \n  // Handle OAuth errors\n  if (error) {\n    console.error('OAuth error:', error, error_description);\n    const errorMsg = encodeURIComponent(\n      error_description || 'Authentication failed. Please try again.'\n    );\n    redirect(`/auth/login?error=${errorMsg}`);\n  }\n  \n  // Handle successful OAuth callback with authorization code\n  if (code) {\n    const supabase = createServerClient();\n    \n    try {\n      // Exchange the code for a session\n      const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);\n      \n      if (exchangeError) {\n        console.error('Code exchange error:', exchangeError);\n        const errorMsg = encodeURIComponent('Authentication failed. Please try again.');\n        redirect(`/auth/login?error=${errorMsg}`);\n      }\n      \n      // Validate the session was created successfully\n      if (!data?.session || !data?.user) {\n        console.error('No session created after code exchange');\n        const errorMsg = encodeURIComponent('Authentication failed. Please try again.');\n        redirect(`/auth/login?error=${errorMsg}`);\n      }\n      \n      // Optional: Store additional user metadata or create user profile\n      // await createUserProfile(data.user);\n      \n      // Redirect to dashboard on successful authentication\n      redirect('/dashboard');\n    } catch (error) {\n      console.error('Callback processing error:', error);\n      const errorMsg = encodeURIComponent('Authentication failed. Please try again.');\n      redirect(`/auth/login?error=${errorMsg}`);\n    }\n  }\n  \n  // No code or error - invalid callback\n  console.warn('Invalid callback - no code or error provided');\n  redirect('/auth/login?error=' + encodeURIComponent('Invalid authentication callback'));\n}\n\n// Optional: Create or update user profile after OAuth\nasync function createUserProfile(user: any) {\n  const supabase = createServerClient();\n  \n  try {\n    // Check if user profile exists\n    const { data: existingProfile } = await supabase\n      .from('user_profiles')\n      .select('id')\n      .eq('user_id', user.id)\n      .single();\n    \n    if (!existingProfile) {\n      // Create new user profile\n      const { error } = await supabase\n        .from('user_profiles')\n        .insert({\n          user_id: user.id,\n          email: user.email,\n          full_name: user.user_metadata?.full_name || user.user_metadata?.name,\n          avatar_url: user.user_metadata?.avatar_url,\n          provider: user.app_metadata?.provider,\n          created_at: new Date().toISOString()\n        });\n      \n      if (error) {\n        console.warn('Failed to create user profile:', error);\n      }\n    }\n  } catch (error) {\n    console.warn('Error managing user profile:', error);\n  }\n}"
